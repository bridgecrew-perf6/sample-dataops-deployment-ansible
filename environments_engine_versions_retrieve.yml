---
- name: retrieve environments
  hosts: controlhub
  remote_user: susannah

  #
  # Retrieve the available Environments and Engine Versions from the DataOps control hub.
  #
  # Displays the environment name, ID, type for environments of type SELF, Other types, such as AWS are not displayed.
  # Displays the engine type ID which includes engine type, version


  # Instructions for use:
  #
  # 1. user must paste the CRED_ID and CRED_TOKEN or set them as environment variables
  #
  # 2. ansible-playbook -i hostsfile_controlhub environments_engine_versions_retrieve.yml

  vars:
    # ENVIRONMENT VARIABLES
    # Set your CRED_ID and CRED_TOKEN here or set environment variables CRED_ID and CRED_TOKEN
    CRED_TOKEN: "{{ lookup('env', 'CRED_TOKEN') | default('YOU MUST SET YOUR CRED_TOKEN', true) }}"
    CRED_ID: "{{ lookup('env','CRED_ID')|default('YOU MUST SET YOUR CRED_ID', true) }}"
    STREAMSETS_SCH_URL: "{{ lookup('env', 'STREAMSETS_SCH_URL') | default('http://localhost:18631', true) }}"

    # Optional settings
    ENGINE_TYPE: "TF"
    ENGINE_VERSION: "4.1.0"
    SCALA_BINARY_VERSION: "2.11"    # "2.11" or "2.12"

    # ENGINE_VERSION_ID_PREFIX: "{{ ENGINE_TYPE }}:{{ENGINE_VERSION}}:{{SCALA_BINARY_VERSION}}"

    STREAMSETS_RETRIEVE_ENV_URL: >-
      {{ STREAMSETS_SCH_URL }}/provisioning/rest/v1/csp/environments

    STREAMSETS_RETRIEVE_ENG_URL: >-
      {{ STREAMSETS_SCH_URL }}/provisioning/rest/v1/csp/engineVersions/

    STREAMSETS_RETRIEVE_HEADERS: {
      "X-Requested-By": "User",
      "X-SS-REST-CALL": "true",
      "X-SS-App-Auth-Token": "{{CRED_TOKEN}}",
      "X-SS-App-Component-Id": "{{CRED_ID}}",
      "Content-type": "application/json",
    }


  tasks:

    # --------------------------------------------------------------------------------
    - name: SECTION 1 - RETRIEVE ENVIRONMENTS STEP 1.1 run retrieve environments curl command
      uri:
        url: "{{ STREAMSETS_RETRIEVE_ENV_URL }}"
        method: GET
        return_content: yes
        status_code: 200
        headers: "{{ STREAMSETS_RETRIEVE_HEADERS }}"
      register: json_response

    - name: STEP 1.2 isolate env_records and convert each line from json to dict
      set_fact:
        env_record_json: "{{ json_response.content }}"

    - name: STEP 1.x Pull data from each line and print all the Name, ID and type of environments for environments with type matching SELF
      ansible.builtin.debug:
        msg: "Environment Name,ID,Type: {{ item.name, item.id, item.type if item.type=='SELF' }}"
      loop:
        "{{ env_record_json.data  }}"
      when:
        "item.type=='SELF'"

    - name: STEP 1.x Make a copy paste line for the environment variable
      ansible.builtin.debug:
        msg: "export STREAMSETS_ENV_ID={{ item.id }}"
      loop:
        "{{ env_record_json.data  }}"
      when:
        "item.type=='SELF'"

    - name: STEP 1.x Pull data from each line and print all the Name, ID and type of environments for environments with type matching SELF
      set_fact:
        environment_id_matching: "{{ environment_id_matching | default([]) + [ item.id ]  }}"
      loop:
        "{{ env_record_json.data  }}"
      when:
        "item.type=='SELF'"

    # --------------------------------------------------------------------------------



    # --------------------------------------------------------------------------------
    - name: SECTION 2 - STEP 2.1 run retrieve engine versions curl command
      uri:
        url: "{{ STREAMSETS_RETRIEVE_ENG_URL }}"
        method: GET
        return_content: yes
        status_code: 200
        headers: "{{ STREAMSETS_RETRIEVE_HEADERS }}"
      register: json_response

    - name: STEP 2.2 extract lines of data as json
      set_fact:
        eng_record: "{{ json_response.content }}"

    - name: STEP 2.3 Set engineversion data ID and version if we are not filtering by engine type and version
      set_fact:
        engine_version_id_matching: "{{ engine_version_id_matching | default([]) + [ item.id ]  }}"
      loop: "{{ eng_record.data }}"

    - name: STEP 2.6 print engineversion data ID and version
      ansible.builtin.debug:
        msg: "{{ engine_version_id_matching }}"
    # --------------------------------------------------------------------------------

