\"#\\n# Copyright (c) 2021 StreamSets Inc.\\n#\\n\\n# Use this file to enable the use of credential stores with Transformer.\\n\\n# IMPORTANT: This file includes a set of properties for each credential store type.\\n# Property names include the default credential store IDs: jks, azure, aws.\\n# When you use custom IDs, you must update the corresponding property names.\\n\\n# IMPORTANT: This file includes a set of properties for each credential store type.\\n# Property names include the default credential store IDs: jks, azure, aws.\\n# When you use custom IDs, you must update the corresponding property names.\\n\\n# To use multiple credential stores of the same type, make sure each credential store\\n# has a set of related properties defined. The property names must be updated with\\n# the appropriate credential store ID.\\n\\n################################################\\n#        Transformer Credential Stores         #\\n################################################\\n\\n# Defines the credential stores for Transformer to use. Specify a comma-separated list\\n# of unique credential store IDs.\\n#credentialStores=jks,azure,aws,vault\\n\\n################################################\\n# Java Keystore Credential Store Configuration #\\n################################################\\n\\n# The following properties are for a Java keystore credential store that uses the 'jks'\\n# default credential store ID. If you specified a custom ID in the credentialStores property\\n# above, replace 'jks' in the property names with the custom ID.\\n\\n# Defines the implementation of the 'jks' credential store\\n# Update 'jks' in the property name as needed, but do not change the definition of this property.\\ncredentialStore.jks.def=streamsets-transformer-jks-credentialstore-lib::com_streamsets_datacollector_credential_javakeystore_JavaKeyStoreCredentialStore\\n\\n# A Java Keystore credential store can be of type JCEKS or PKCS12\\ncredentialStore.jks.config.keystore.type=PKCS12\\n\\n# The location of the Java keystore. Specify an absolute path or a path relative to the\\n# $TRANSFORMER_CONF directory.\\ncredentialStore.jks.config.keystore.file=jks-credentialStore.pkcs12\\n\\n# The password to access the Java keystore\\ncredentialStore.jks.config.keystore.storePassword=changeIt\\n\\n########################################################\\n#    Azure Key Vault Credential Store Configuration    #\\n########################################################\\n\\n# The following properties are for an Azure Key Vault credential store that uses the 'azure'\\n# default credential store ID. If you specified a custom ID in the credentialStores property,\\n# replace 'azure' in the property names with the custom ID.\\n\\n# Defines the implementation of the 'azure' credential store\\n# Update 'azure' in the property name as needed, but do not change the definition of this property.\\ncredentialStore.azure.def=streamsets-transformer-azure-keyvault-credentialstore-lib::com_streamsets_datacollector_credential_azure_keyvault_AzureKeyVaultCredentialStore\\n\\n# Credential refresh interval\\n# How long a credential can be cached locally before fetching it again from Azure Key Vault.\\ncredentialStore.azure.config.credential.refresh.millis=30000\\n\\n# Credential retry interval\\n# How long to wait before retrying to fetch a credential from Azure Key Vault in case of errors.\\n# This retry delay is not blocking. Locally, it will fail immediately.\\ncredentialStore.azure.config.credential.retry.millis=15000\\n\\n# Azure Key Vault credential provider URL\\n# This property must be set.\\n# credentialStore.azure.config.vault.url=https://<YOUR_KEY_VAULT>.vault.azure.net/\\n\\n# Azure Key Vault client ID for this Transformer\\n#credentialStore.azure.config.client.id=<MUST BE SET>\\n\\n# Azure Key Vault client key for this Transformer\\n#credentialStore.azure.config.client.key=<MUST BE SET>\\n\\n# Requires a group secret for each secret\\ncredentialStore.azure.config.enforceEntryGroup=false\\n\\n############################################################\\n#    AWS Secrets Manager Credential Store Configuration    #\\n############################################################\\n\\n# The following properties are for an AWS Secrets Manager credential store that uses the 'aws'\\n# default credential store ID. If you specified a custom ID in the credentialStores property,\\n# replace 'aws' in the property names with the custom ID.\\n\\n# Defines the implementation of the 'aws' credential store\\n# Update 'aws' in the property name as needed, but do not change the definition of this property.\\ncredentialStore.aws.def=streamsets-transformer-aws-secrets-manager-credentialstore-lib::com_streamsets_datacollector_credential_aws_secrets_manager_AWSSecretsManagerCredentialStore\\n\\n# Default name-key separator for the name parameter in credential functions\\ncredentialStore.aws.config.nameKey.separator=&\\n\\n# AWS region\\ncredentialStore.aws.config.region=<MUST BE SET>\\n\\n# AWS access key\\ncredentialStore.aws.config.access.key=<MUST BE SET>\\n\\n# AWS secret key\\ncredentialStore.aws.config.secret.key=<MUST BE SET>\\n\\n# Secrets max cache size\\n# Maximum number of secrets to cache locally\\ncredentialStore.aws.config.cache.max.size=1024\\n\\n# Secrets cache TTL\\n# The number of milliseconds that a cached secret is considered valid before requiring a refresh\\n# The default is equivalent to 1 hour\\ncredentialStore.aws.config.cache.ttl.millis=3600000\\n\\n# Requires a group secret for each secret\\ncredentialStore.aws.config.enforceEntryGroup=false\\n\\n########################################################\\n#    Hashicorp Vault Credential Store Configuration    #\\n########################################################\\n\\n# The following properties are for a Hashicorp Vault credential store that uses the 'vault'\\n# default credential store ID. If you specified a custom ID in the credentialStores property,\\n# replace 'vault' in the property names with the custom ID.\\n\\n# Defines the implementation of the 'vault' credential store\\n# Update 'vault' in the property name as needed, but do not change the definition of this property.\\ncredentialStore.vault.def=streamsets-transformer-vault-credentialstore-lib::com_streamsets_datacollector_credential_vault_VaultCredentialStore\\n\\n# Default path-key separator for the name parameter in credential functions\\ncredentialStore.vault.config.pathKey.separator=&\\n\\n# URL of the Vault server to connect to\\ncredentialStore.vault.config.addr=http://localhost:8200\\n\\n# AppRole mode (recommended)\\ncredentialStore.vault.config.role.id=\\ncredentialStore.vault.config.secret.id=\\n\\n#\\n# The Vault User ID is generated by hashing the MAC address belonging to the network interface assigned\\n# the IP address of hostname -f. It can also be retrieved by the show-vault-id command of the\\n# StreamSets executable.\\n#\\n\\n# Transformer authenticates with Vault using the AppId authentication backend. The app-id must be specified below.\\n# credentialStore.vault.config.app.id=\\n\\n# Optional Settings\\n\\n# Supported KV Secret Engine version 1 by default. Possible values: 1 or 2.\\ncredentialStore.vault.config.version=1\\n\\n# Define namespaces for Vault Enterprise\\n#credentialStore.vault.config.namespace=\\n\\n# The renewal interval must be shorter than the shortest lease issued by Vault including auth tokens.\\ncredentialStore.vault.config.lease.renewal.interval.sec=60\\ncredentialStore.vault.config.lease.expiration.buffer.sec=120\\ncredentialStore.vault.config.open.timeout=0\\ncredentialStore.vault.config.proxy.address=\\ncredentialStore.vault.config.proxy.port=8080\\ncredentialStore.vault.config.proxy.username=\\ncredentialStore.vault.config.proxy.password=\\ncredentialStore.vault.config.read.timeout=0\\ncredentialStore.vault.config.ssl.enabled.protocols=TLSv1.2,TLSv1.3\\ncredentialStore.vault.config.ssl.truststore.file=\\ncredentialStore.vault.config.ssl.truststore.password=\\ncredentialStore.vault.config.ssl.verify=true\\ncredentialStore.vault.config.ssl.timeout=0\\ncredentialStore.vault.config.timeout=0\\n\\n# Requires a group secret for each secret\\ncredentialStore.vault.config.enforceEntryGroup=false\"
