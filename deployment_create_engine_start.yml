---
- name: Create a deployment
  hosts: controlhub

  # CREATE A DEPLOYMENT AND ENABLE IT in the DataOps Control Hub

  vars:

  tasks:
    # --------------------------------------------------------------------------------
    - name: SECTION 0 - Check for required data and set up variables. STEP 0.1 Set engine version number based on engine type, if the engine version is the default value
      set_fact:
        ENGINE_VERSION: "{{ ENGINE_VERSION_DC  if ENGINE_TYPE=='DC' else  ENGINE_VERSION_TF }}"

    - name: STEP 0.2 Set deployment name
      set_fact:
        NEW_DEPLOYMENT_NAME: "{{ NEW_DEPLOYMENT_NAME | default( NEW_DEPLOYMENT_NAME_BASE + '_' + ENGINE_TYPE + '_' + ENGINE_VERSION ) }}"

    - name: STEP 0.3 set SCALA BINARY version to be empty string for engine type DC
      set_fact:
        SCALA_BINARY_VERSION: ""
      when: "ENGINE_TYPE=='DC'"

    - name: STEP 0.4 Create ENGINE_VERSION_ID
      set_fact:
        ENGINE_VERSION_ID:  "{{ENGINE_TYPE}}:{{ENGINE_VERSION}}:{{SCALA_BINARY_VERSION}}:{{BUILD_NUMBER}}"

    - name: STEP 0.5 - Add the Scala version to deployment name, if set (only applicable to Transformer)
      set_fact:
        NEW_DEPLOYMENT_NAME: "{{ NEW_DEPLOYMENT_NAME + '_' + SCALA_BINARY_VERSION }}"
      when: "ENGINE_TYPE=='TF'"

    - name: STEP 0.6 Add Scala binary version to the deployment creation
      set_fact:
        CREATE_DEPLOYMENT_BINARY_DATA: "{{ CREATE_DEPLOYMENT_BINARY_DATA | default({}) | combine ({ item.key : item.value }) }}"
      with_items:
        - { 'key': 'scalaBinaryVersion' , 'value': "{{ SCALA_BINARY_VERSION }}" }
      when: "ENGINE_TYPE=='TF'"

    - name: STEP 0.7 Verify required env vars are set
      assert:
        that:
          - CRED_TOKEN is defined
          - CRED_ID is defined
          - STREAMSETS_SCH_URL is defined
          - INSTALL_TYPE is defined
          - ENVIRONMENT_ID is defined
          - ENGINE_VERSION_ID is defined
          - ENVIRONMENT_ID != "Environment ID must be configured."
        fail_msg: "At least one required environment variable was not set. Did you defined an environment ID (STREAMSETS_ENV_ID)?"
   # --------------------------------------------------------------------------------

   # --------------------------------------------------------------------------------
    - name: SECTION 1 - CREATE DEPLOYMENT STEP 1.1
      uri:
        url: "{{ CREATE_DEPLOYMENT_URL }}"
        method: PUT
        return_content: yes
        status_code: 201, 200
        headers: "{{ DEPLOYMENT_HTTP_HEADERS_DICT }}"
        body_format: json
        body: "{{ CREATE_DEPLOYMENT_BINARY_DATA }}"
      register: json_response
      no_log: True

    - name: STEP 1.2 Extract JSON deployment_record
      set_fact:
        deployment_record: "{{ json_response.content }}"

    - name: STEP 1.3 Extract Deployment ID from response
      set_fact:
         DEPLOYMENT_ID: "{{ deployment_record.id }}"

    # --------------------------------------------------------------------------------


    # --------------------------------------------------------------------------------
    - name: SECTION 2 - READ STAGELIBRARIES FILE, STEP 2.1
      set_fact:
        ADVANCED_CONFIG_PATH: '{{ ENGINE_TYPE }}/{{ ENGINE_VERSION }}'
      when: "ENGINE_TYPE=='DC'"

    - name: STEP 2.2 - Set path to the stagelibs.yml file
      set_fact:
        ADVANCED_CONFIG_PATH: '{{ ENGINE_TYPE }}/{{ ENGINE_VERSION }}/{{ SCALA_BINARY_VERSION }}'
      when: "ENGINE_TYPE=='TF'"

    - name: STEP 2.x - Add onto the path to the stagelibs.yml file
      set_fact:
        STAGELIBS_PATH: "{{ ADVANCED_CONFIG_PATH }}/stagelibs.yml"

    - name: STEP 2.x - Read stagelibraries file
      set_fact:
        STAGELIBS: "{{ lookup('file', '{{ STAGELIBS_PATH }}').splitlines() }}"
    # --------------------------------------------------------------------------------


    # --------------------------------------------------------------------------------
    - name: SECTION 3 - UPDATE THE STAGE LIBRARIES - STEP 3.1 Set the stageLibs field in the deployment_record
      set_fact:
         deployment_record: "{{ deployment_record|combine({'engineConfiguration': {'stageLibs': STAGELIBS }}, recursive=True) }}"

    - name: STEP 3.2 Update the install type
      set_fact:
        deployment_record: "{{ deployment_record|combine({'installType': INSTALL_TYPE }, recursive=True) }}"

    - name: STEP 3.3 Parse deployment tags
      set_fact:
        DEP_TAGS: "{{  DEPLOYMENT_TAGS.split(',') }}"

    - name: STEP 3.4 Deployment tags
      set_fact:
        deployment_record: "{{ deployment_record|combine({'rawDeploymentTags': DEP_TAGS }, recursive=True) }}"

    - name: STEP 3.5 Parse engine labels
      set_fact:
        ENG_LABELS: "{{  ENGINE_LABELS.split(',') }}"

    - name: STEP 3.6 Engine labels
      set_fact:
        deployment_record: "{{ deployment_record|combine({'engineConfiguration': {'labels': ENG_LABELS }}, recursive=True) }}"
    # --------------------------------------------------------------------------------


    # --------------------------------------------------------------------------------
    - name: SECTION 4  - SEND UPDATE DEPLOYMENT STAGE LIBRARIES COMMAND - STEP 4.1 Update the deployment
      uri:
        url: "{{ UPDATE_DEPLOYMENT_URL }}"
        method: POST
        return_content: yes
        status_code: 201, 200
        headers: "{{ DEPLOYMENT_HTTP_HEADERS_DICT }}"
        body_format: json
        body: "{{ deployment_record }}"
      register: json_response

    - name: STEP 4.2 Extract JSON deployment_record
      set_fact:
        deployment_record_updated: "{{ json_response.content }}"
    # --------------------------------------------------------------------------------


   # --------------------------------------------------------------------------------
    - name: SECTION 4.5  - UPDATE ADVANCED CONFIGURATIONS - STEP 4.5.1 Find files in the advanced configuration folder named .properties or .policy
      find:
        paths: "{{ playbook_dir }}/{{ ADVANCED_CONFIG_PATH }}/advanced_config/"
        patterns: '*.properties,*policy'
        recurse: false
      register: output

    - name: STEP 4.5.2 Extract the file names for advanced configuration files
      set_fact:
        advanced_config_filenames:  "{{ advanced_config_filenames | default([]) + [ item.path ] }}"
      loop: "{{ output.files }}"

    - name: STEP 4.5.3 Update each advanced configuration file
      include_tasks: advanced_config_files_tasks.yml
      loop: "{{ advanced_config_filenames }}"

    - name: STEP 4.5.4 Extract JSON deployment_record
      set_fact:
         deployment_record_updated: "{{ curlResult.stdout | from_json }}"
    # --------------------------------------------------------------------------------


    # --------------------------------------------------------------------------------
    - name: SECTION 5 - SET THE DEPLOYMENT TO 'COMPLETE' - STEP 5.1 SEND UPDATE TO COMPLETE DEPLOYMENT
      uri:
        url: "{{ COMPLETE_DEPLOYMENT_URL }}"
        method: POST
        return_content: yes
        status_code: 201, 200
        headers: "{{ DEPLOYMENT_HTTP_HEADERS_DICT }}"
        body_format: json
        body: "{{ deployment_record_updated }}"
      register: json_response

    - name: STEP 5.2 Extract JSON deployment_record
      set_fact:
        deployment_record_updated: "{{ json_response.content }}"
     # --------------------------------------------------------------------------------


    # --------------------------------------------------------------------------------
    - name: SECTION 6 - START (ENABLE) DEPLOYMENT - STEP 6.1 the start deployment curl command string
      uri:
        url: "{{ START_DEPLOYMENT_URL }}"
        method: POST
        return_content: yes
        status_code: 201, 200
        headers: "{{ DEPLOYMENT_HTTP_HEADERS_DICT }}"
        body_format: json
      register: json_response
     # --------------------------------------------------------------------------------


     # --------------------------------------------------------------------------------
    - name: SECTION 7 - STEP 7.1 Check status of the deployment
      set_fact:
        deployment_record_final: "{{ json_response.content }}"

    - name: STEP 7.2 Check for ENABLED state
      assert:
        that: "deployment_record_final.state == 'ENABLED'"
        fail_msg: "FAIL: expected deployment in an ENABLED state."
      ignore_errors: yes

    - name: STEP 7.3 for OK status
      assert:
        that: "deployment_record_final.status == 'OK'"
        fail_msg: "FAIL: expected deployment in an OK status."
      ignore_errors: yes
   # --------------------------------------------------------------------------------


   # --------------------------------------------------------------------------------
    - name: SECTION 8 - ENGINES - STEP 8.1 get the installation command from the deployment
      uri:
        url: "{{ GET_INSTALL_COMMAND_URL }}"
        method: GET
        return_content: yes
        status_code: 200
        headers: "{{ DEPLOYMENT_HTTP_HEADERS_DICT }}"
        body_format: json
      register: installCommandInHere
      no_log: True

    - name: To pass a variable value to the next playbook, register it as a host
      add_host:
        name: "INSTALL_COMMAND_HOST"
        INSTALL_COMMAND_VAR: " {{ installCommandInHere.content }}"
      no_log: True


- name: Engines
  import_playbook: engines_start.yml
