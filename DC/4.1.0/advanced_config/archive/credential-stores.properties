\"#\\n# Copyright (c) 2021 StreamSets Inc.\\n#\\n\\n# Use this file to enable the use of credential stores with Data Collector.\\n\\n# IMPORTANT: This file includes a set of properties for each credential store type.\\n# Property names include the default credential store IDs: jks,aws,azure,cyberark,thycotic,vault,gcp.\\n# When you use custom IDs, you must update the corresponding property names.\\n\\n# To use multiple credential stores of the same type, make sure each credential store\\n# has a set of related properties defined. Make sure the property names include\\n# the appropriate credential store ID.\\n\\n################################################\\n#       Data Collector Credential Stores       #\\n################################################\\n\\n# Defines the credential stores for Data Collector to use. Specify a comma-separated list\\n# of unique credential store IDs.\\n#credentialStores=jks,aws,azure,cyberark,thycotic,vault,gcp\\n\\n################################################\\n# Java Keystore Credential Store Configuration #\\n################################################\\n\\n# The following properties are for a Java keystore credential store that uses the 'jks'\\n# default credential store ID. If you specified a custom ID in the credentialStores property\\n# above, replace 'jks' in the property names with the custom ID.\\n\\n# Defines the implementation of the 'jks' credential store\\n# Update 'jks' in the property name as needed, but do not change the definition of this property.\\ncredentialStore.jks.def=streamsets-datacollector-jks-credentialstore-lib::com_streamsets_datacollector_credential_javakeystore_JavaKeyStoreCredentialStore\\n\\n# A Java keystore credential store can be of type JCEKS or PKCS12\\ncredentialStore.jks.config.keystore.type=PKCS12\\n\\n# The location of the Java keystore. Specify an absolute path or a path relative to the\\n# $SDC_CONF directory.\\ncredentialStore.jks.config.keystore.file=jks-credentialStore.pkcs12\\n\\n# The password to access the Java keystore\\ncredentialStore.jks.config.keystore.storePassword=changeIt\\n\\n# The minimum refresh millis used to reload the keystore file\\n#credentialStore.jks.config.keystore.file.min.refresh.millis=10000\\n\\n############################################################\\n#    AWS Secrets Manager Credential Store Configuration    #\\n############################################################\\n\\n# The following properties are for an AWS Secrets Manager credential store that uses the 'aws'\\n# default credential store ID. If you specified a custom ID in the credentialStores property,\\n# replace 'aws' in the property names with the custom ID.\\n\\n# Defines the implementation of the 'aws' credential store\\n# Update 'aws' in the property name as needed, but do not change the definition of this property.\\ncredentialStore.aws.def=streamsets-datacollector-aws-secrets-manager-credentialstore-lib::com_streamsets_datacollector_credential_aws_secrets_manager_AWSSecretsManagerCredentialStore\\n\\n# Default name-key separator for the name parameter in credential functions\\ncredentialStore.aws.config.nameKey.separator=&\\n\\n# AWS Region\\ncredentialStore.aws.config.region=<MUST BE SET>\\n\\n# It must be: accessKeys or instanceProfile\\ncredentialStore.aws.config.security.method=accessKeys\\n\\n# AWS access key\\ncredentialStore.aws.config.access.key=<MUST BE SET IF ACCESS KEYS IS USED AS A SECURITY METHOD>\\n\\n# AWS secret key\\ncredentialStore.aws.config.secret.key=<MUST BE SET IF ACCESS KEYS IS USED AS A SECURITY METHOD>\\n\\n# Secrets cache max size\\n# Maximum number of secrets to cache locally\\ncredentialStore.aws.config.cache.max.size=1024\\n\\n# Secrets cache TTL\\n# The number of milliseconds that a cached secret is considered valid before requiring a refresh\\n# The default is equivalent to 1 hour\\ncredentialStore.aws.config.cache.ttl.millis=3600000\\n\\n# Requires a group secret for each secret\\ncredentialStore.aws.config.enforceEntryGroup=false\\n\\n########################################################\\n#    Azure Key Vault Credential Store Configuration    #\\n########################################################\\n\\n# The following properties are for an Azure Key Vault credential store that uses the 'azure'\\n# default credential store ID. If you specified a custom ID in the credentialStores property,\\n# replace 'azure' in the property names with the custom ID.\\n\\n# Defines the implementation of the 'azure' credential store\\n# Update 'azure' in the property name as needed, but do not change the definition of this property.\\ncredentialStore.azure.def=streamsets-datacollector-azure-keyvault-credentialstore-lib::com_streamsets_datacollector_credential_azure_keyvault_AzureKeyVaultCredentialStore\\n\\n# Credential refresh interval\\n# How long a credential can be cached locally before fetching it again from Azure Key Vault.\\ncredentialStore.azure.config.credential.refresh.millis=30000\\n\\n# Credential retry interval\\n# How long to wait before retrying to fetch a credential from Azure Key Vault in case of errors.\\n# This retry delay is not blocking. Locally, it will fail immediately.\\ncredentialStore.azure.config.credential.retry.millis=15000\\n\\n# Azure Key Vault credential provider URL\\n# This property must be set.\\n# credentialStore.azure.config.vault.url=https://<YOUR_KEY_VAULT>.vault.azure.net/\\n\\n# Azure Key Vault client ID for this Data Collector\\n#credentialStore.azure.config.client.id=<MUST BE SET>\\n\\n# Azure Key Vault client key for this Data Collector\\n#credentialStore.azure.config.client.key=<MUST BE SET>\\n\\n# ERequires a group secret for each secret\\ncredentialStore.azure.config.enforceEntryGroup=false\\n\\n#################################################\\n#    CyberArk Credential Store Configuration    #\\n#################################################\\n\\n# The following properties are for a CyberArk credential store that uses the 'cyberark'\\n# default credential store ID. If you specified a custom ID in the credentialStores property,\\n# replace 'cyberark' in the property names with the custom ID.\\n\\n# Defines the implementation of the 'cyberark' credential store\\n# Update 'cyberark' in the property name as needed, but do not change the definition of this property.\\ncredentialStore.cyberark.def=streamsets-datacollector-cyberark-credentialstore-lib::com_streamsets_datacollector_credential_cyberark_CyberArkCredentialStore\\n\\n# Credential refresh interval\\n# How long a credential can be cached locally before fetching it again from CyberArk.\\n#credentialStore.cyberark.config.credential.refresh.millis=30000\\n\\n# Credential retry interval\\n# How long to wait before retrying to fetch a credential from CyberArk in case of errors.\\n# This retry delay is not blocking. Locally, it will fail immediately.\\n#credentialStore.cyberark.config.credential.retry.millis=15000\\n\\n# Connector type to CyberArk\\n# Currently 'webservices' is the only supported connector\\n#credentialStore.cyberark.config.connector=webservices\\n\\n##############################################################\\n#     CyberArk Credential Store Web Service Configuration    #\\n##############################################################\\n\\n# CyberArk Central Credential Provider credential retrieval web service URL\\ncredentialStore.cyberark.config.ws.url=https://<HOST>:<PORT>/AIMWebService/api/Accounts\\n\\n# CyberArk application ID for this Data Collector\\ncredentialStore.cyberark.config.ws.appId=<MUST BE SET>\\n\\n# Maximum number of concurrent web service calls to CyberArk\\n#credentialStore.cyberark.config.ws.maxConcurrentConnections=10\\n\\n# HTTP connection inactivity check\\n#credentialStore.cyberark.config.ws.validateAfterInactivity.millis=60000\\n\\n# TCP and HTTP connection timeout\\n#credentialStore.cyberark.config.ws.connectionTimeout.millis=10000\\n\\n# Default separator for CyberArk safe, folder, object name, and object element used in the\\n# name parameter in credential functions.\\n#credentialStore.cyberark.config.ws.nameSeparator=&\\n\\n# HTTP authentication mechanism used by CyberArk Central Credential Provider web services\\n# Possible values: none, basic, digest\\n#credentialStore.cyberark.config.ws.http.authentication=none\\n\\n# User name when using basic or digest authentication\\n#credentialStore.cyberark.config.ws.http.authentication.user=\\n\\n# Password when using basic or digest authentication\\n#credentialStore.cyberark.config.ws.http.authentication.password=\\n\\n# When using HTTPS and the server certificate is not signed by a public CA, a truststore\\n# with the public certificate must be available in this truststore file, or in the JDK default truststore.\\n# Specify an absolute path or a path relative to the $SDC_CONF directory.\\n#credentialStore.cyberark.config.ws.truststoreFile=\\n\\n# The password to access the truststore file\\n#credentialStore.cyberark.config.ws.truststorePassword=\\n\\n# HTTPS supported protocols\\n#credentialStore.cyberark.config.ws.supportedProtocols=TLSv1.2\\n\\n# Determines if the hostname of the CyberArk Central Credential Provider web service should be\\n# verified against the domain defined in the HTTPS certificate.\\n#credentialStore.cyberark.config.ws.hostnameVerifier.skip=false\\n\\n# When using HTTPS and the CyberArk Central Credential Provider web service is configured to require client side\\n# certificates, the client certificate must be available in this keystore file, or in the JDK default truststore.\\n# Specify an absolute path or a path relative to the $SDC_CONF directory.\\n#credentialStore.cyberark.config.ws.keystoreFile=\\n\\n# The password to access the keystore file\\n#credentialStore.cyberark.config.ws.keystorePassword=\\n\\n# The password to access the certificate within the keystore file\\n#credentialStore.cyberark.config.ws.keyPassword=\\n\\n# The proxy URI used to access CyberArk\\n#credentialStore.cyberark.config.ws.proxyURI=\\n\\n# Requires a group secret for each secret\\ncredentialStore.cyberark.config.enforceEntryGroup=false\\n\\n############################################################\\n#    Google Secret Manager Credential Store Configuration    #\\n############################################################\\n\\n# The following properties are for an Google Secret Manager credential store that uses the 'gcp'\\n# default credential store ID. If you specified a custom ID in the credentialStores property,\\n# replace 'gcp' in the property names with the custom ID.\\n\\n# Defines the implementation of the 'gcp' credential store\\n# Update 'gcp' in the property name as needed, but do not change the definition of this property.\\ncredentialStore.gcp.def=streamsets-datacollector-google-secret-manager-credentialstore-lib::com_streamsets_datacollector_google_secret_manager_credentialstore_GoogleSecretManagerCredentialStore\\n\\n#Experation time of the cache, default 30 minutes\\ncredentialStore.gcp.config.cache.inactivityExpiration.millis=1800000\\n\\ncredentialStore.gcp.config.delimiter=?\\n\\ncredentialStore.gcp.config.project.id=\\n########################################################\\n#    Hashicorp Vault Credential Store Configuration    #\\n########################################################\\n\\n# The following properties are for a Hashicorp Vault credential store that uses the 'vault'\\n# default credential store ID. If you specified a custom ID in the credentialStores property,\\n# replace 'vault' in the property names with the custom ID.\\n\\n# Defines the implementation of the 'vault' credential store\\n# Update 'vault' in the property name as needed, but do not change the definition of this property.\\ncredentialStore.vault.def=streamsets-datacollector-vault-credentialstore-lib::com_streamsets_datacollector_credential_vault_VaultCredentialStore\\n\\n# Default path-key separator for the name parameter in credential functions\\ncredentialStore.vault.config.pathKey.separator=&\\n\\n# URL of the Vault server to connect to\\ncredentialStore.vault.config.addr=http://localhost:8200\\n\\n# AppRole mode (recommended)\\ncredentialStore.vault.config.role.id=\\ncredentialStore.vault.config.secret.id=${file(\\\"vault-secret-id\\\")}\\n\\n#\\n# The Vault User ID is generated by hashing the MAC address belonging to the network interface assigned\\n# the IP address of hostname -f. It can also be retrieved by the show-vault-id command of the\\n# StreamSets executable.\\n#\\n\\n# Data Collector authenticates with Vault using the AppId authentication backend. The app-id must be specified below.\\n# credentialStore.vault.config.app.id=\\n\\n# Optional Settings\\n\\n# Supported KV Secret Engine version 1 by default. Possible values: 1 or 2.\\ncredentialStore.vault.config.version=1\\n\\n# Define namespaces for Vault Enterprise\\n#credentialStore.vault.config.namespace=\\n\\n# The renewal interval must be shorter than the shortest lease issued by Vault including auth tokens.\\ncredentialStore.vault.config.lease.renewal.interval.sec=60\\ncredentialStore.vault.config.lease.expiration.buffer.sec=120\\ncredentialStore.vault.config.open.timeout=0\\ncredentialStore.vault.config.proxy.address=\\ncredentialStore.vault.config.proxy.port=8080\\ncredentialStore.vault.config.proxy.username=\\ncredentialStore.vault.config.proxy.password=\\ncredentialStore.vault.config.read.timeout=0\\ncredentialStore.vault.config.ssl.enabled.protocols=TLSv1.2,TLSv1.3\\ncredentialStore.vault.config.ssl.truststore.file=\\ncredentialStore.vault.config.ssl.truststore.password=\\ncredentialStore.vault.config.ssl.verify=true\\ncredentialStore.vault.config.ssl.timeout=0\\ncredentialStore.vault.config.timeout=0\\n\\n# Requires a group secret for each secret\\ncredentialStore.vault.config.enforceEntryGroup=false\\n\\n#####################################################################\\n#    Thycotic Secret Server Credential Store Configuration          #\\n#####################################################################\\n\\n# The following properties are for an Thycotic Secret Server credential store that uses the 'thycotic'\\n# default credential store ID. If you specified a custom ID in the credentialStores property,\\n# replace 'thycotic' in the property names with the custom ID.\\n\\n# Defines the implementation of the 'thycotic' credential store.\\n# Update 'thycotic' in the property name as needed, but do not change the definition of this property.\\ncredentialStore.thycotic.def=streamsets-datacollector-thycotic-credentialstore-lib::com_streamsets_datacollector_credential_thycotic_ThycoticCredentialStore\\n\\n# Thycotic Secret Server URL. Use the following format: https://<host name>:<port number>.\\n# Use HTTPS to avoid unencrypted communication.\\ncredentialStore.thycotic.config.url=<MUST BE SET>\\n\\n# User name to connect to Thycotic Secret Server\\ncredentialStore.thycotic.config.username=<MUST BE SET>\\n\\n# Password to connect to Thycotic Secret Server\\ncredentialStore.thycotic.config.password=${file(\\\"thycotic-secret-password\\\")}\\n\\n# Cache expiration time\\ncredentialStore.thycotic.config.credential.cache.inactivityExpiration.seconds=1800\\n\\n# Credential refresh interval\\n# How long a credential can be cached locally before fetching it again from Thycotic Secret Server.\\ncredentialStore.thycotic.config.credential.refresh.seconds=30000\\n\\n# Credential retry interval\\n# How long to wait before retrying to fetch a credential from Thycotic Secret Server in the case of an error.\\ncredentialStore.thycotic.config.credential.retry.seconds=15000\\n\\n# Buffer for expiring auth tokens. Data Collector renews tokens that expire in less than\\n# the specified number of seconds. Default is 1201.\\ncredentialStore.thycotic.config.token.expiration.buffer.seconds=1201\\n\\n# SSL/TLS-enabled protocols. Versions TLSv1.2 or later are recommended. Default is TLSv1.2,TLSv1.3\\ncredentialStore.thycotic.config.ssl.enabled.protocols=TLSv1.2,TLSv1.3\\n\\n# Path to a Java truststore file. Required when using a private CA or certificates not trusted\\n# by the Java default truststore.\\ncredentialStore.thycotic.config.ssl.truststore.file=\\n\\n# Password for the truststore file\\ncredentialStore.thycotic.config.ssl.truststore.password=\\n\\n# Whether to verify that the Thycotic server hostname matches its certificate.\\n# Default is true. False is not recommended.\\ncredentialStore.thycotic.config.ssl.verify=true\\n\\n# Timeout for the SSL/TLS handshake in milliseconds. Default is 0 for no limit.\\ncredentialStore.thycotic.config.ssl.timeout=0\\n\\n# Separator to use for the Thycotic Secret Server secret ID and field name values in the\\n# credential name argument used in credential functions.\\ncredentialStore.thycotic.config.nameSeparator=-\\n\\n# Milliseconds to wait for data before timing out.\\n# Default is 0 for no limit.\\ncredentialStore.thycotic.config.read.timeout=0\\n\\n# Timeout to establish an HTTP connection to Thycotic Secret Server in milliseconds.\\n# Default is 0 for no limit.\\ncredentialStore.thycotic.config.open.timeout=0\\n\\n# Timeout in milliseconds to read from Thycotic Secret Server after a connection has been established.\\n# Default is 0 for no limit.\\ncredentialStore.thycotic.config.timeout=0\\n\\n# Requires a group secret for each secret\\ncredentialStore.thycotic.config.enforceEntryGroup=false\\n\"\n},
